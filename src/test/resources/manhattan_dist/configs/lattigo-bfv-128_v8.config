params, err := bfv.NewParametersFromLiteral(bfv.ParametersLiteral{
  LogN:         16,
  T:            786433,
  LogQ:         []int{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
  60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
  LogP:         []int{60, 60, 60},
  Sigma:        rlwe.DefaultSigma,
})
if err != nil { panic(err); }

// BFV parameters (128 bit security) with plaintext modulus 65929217
slots := 10
if err != nil {
  panic(err)
}
encoder := bfv.NewEncoder(params)
kgen := bfv.NewKeyGenerator(params)
clientSk, clientPk := kgen.GenKeyPair()
encryptorPk := bfv.NewEncryptor(params, clientPk)
encryptorSk := bfv.NewEncryptor(params, clientSk)
decryptor := bfv.NewDecryptor(params, clientSk)
rlk := kgen.GenRelinearizationKey(clientSk, 1)
evaluator := bfv.NewEvaluator(params, rlwe.EvaluationKey{Rlk: rlk})
funits.FunitsInit(&encryptorPk, &encoder, &evaluator, &params, int(params.T()), slots, word_sz)
ptxt := bfv.NewPlaintext(params)
tmp := make([]int64, slots)
encoder.EncodeInt(tmp, ptxt)
tmp_ := make([]*bfv.Ciphertext, word_sz)
_ = tmp_


