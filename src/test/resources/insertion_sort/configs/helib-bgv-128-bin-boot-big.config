unsigned long p = 2, m = 35113, r = 1, bits = 450;
vector<long> mvec = {37, 949};
vector<long> gens = {16134, 8548};
vector<long> ords = {36, 24};
unsigned long c = 2;
Context context = helib::ContextBuilder<helib::BGV>()
  .m(m).p(p).r(r).gens(gens).ords(ords).bits(bits)
  .c(c).bootstrappable(true).mvec(mvec).build();
SecKey secret_key(context);
cout << "Security Level: " << context.securityLevel() << endl;
secret_key.GenSecKey();
addSome1DMatrices(secret_key);
addFrbMatrices(secret_key);
secret_key.genRecryptData();
PubKey& public_key = secret_key;
const EncryptedArray& ea = context.getEA();
std::vector<helib::zzX> unpackSlotEncoding;
buildUnpackSlotEncoding(unpackSlotEncoding, ea);
long slots = ea.size();
Ptxt<helib::BGV> tmp(context);
Ctxt scratch(public_key);
vector<Ctxt> tmp_(8, scratch);
