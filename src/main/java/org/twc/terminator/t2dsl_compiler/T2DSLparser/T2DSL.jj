options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(T2DSLParser)
  package org.twc.terminator.t2dsl_compiler.T2DSLparser;
public class T2DSLParser {}
PARSER_END(T2DSLParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
  < LPAREN: "(" >
  | < RPAREN: ")" >
  | < LSQPAREN: "[" >
  | < RSQPAREN: "]" >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < SEMICOLON: ";" >
  | < DOT: "." >
  | < ASSIGN: "=" >
  | < LT: "<" >
  | < LTE: "<=" >
  | < GT: ">" >
  | < GTE: ">=" >
  | < EQ: "==" >
  | < NEQ: "!=" >
  | < NOT : "!" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < TIMES: "*" >
  | < DIV: "/" >
  | < MOD: "%" >
  | < AND : "&&" >
  | < OR : "||" >
  | < BINAND : "&" >
  | < BINOR : "|" >
  | < BINXOR : "^" >
  | < SLA : "<<" >
  | < SRA : ">>" >
  | < SRL : ">>>" >
  | < BINNOT : "~" >
  | < BOOLEAN: "boolean" >
  | < CLASS: "class" >
  | < INTERFACE: "interface" >
  | < ELSE: "else" >
  | < EXTENDS: "extends" >
  | < FALSE: "false" >
  | < IF: "if" >
  | < WHILE: "while" >
  | < FOR: "for" >
  | < INTEGER: "int" >
  | < ENCRYPTED_INTEGER: "EncInt" >
  | < DOUBLE: "double" >
  | < ENCRYPTED_DOUBLE: "EncDouble" >
  | < MAIN: "main" >
  | < NEW: "new" >
  | < ARRAY_SIZE: "size" >
  | < PUBLIC: "public" >
  | < RETURN: "return" >
  | < STATIC: "static" >
  | < STRING: "String" >
  | < TRUE: "true" >
  | < PRINT: "print" >
  | < PRINT_BATCHED: "print_batched" >
  | < VOID: "void" >
  | < REDUCE_NOISE: "reduce_noise" >
  | < MATCH_PARAMS: "match_params" >
  | < ROTATE_LEFT: "rotate_left" >
  | < ROTATE_RIGHT: "rotate_right" >
  | < START_TIMER: "tstart" >
  | < STOP_TIMER: "tstop" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) > |
  < DOUBLE_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) "." (["0"-"9"])* >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
    [
    "\u0024",
    "\u0041"-"\u005a",
    "\u005f",
    "\u0061"-"\u007a",
    "\u00c0"-"\u00d6",
    "\u00d8"-"\u00f6",
    "\u00f8"-"\u00ff",
    "\u0100"-"\u1fff",
    "\u3040"-"\u318f",
    "\u3300"-"\u337f",
    "\u3400"-"\u3d2d",
    "\u4e00"-"\u9fff",
    "\uf900"-"\ufaff"
    ]
  >
|
  < #DIGIT:
    [
    "\u0030"-"\u0039",
    "\u0660"-"\u0669",
    "\u06f0"-"\u06f9",
    "\u0966"-"\u096f",
    "\u09e6"-"\u09ef",
    "\u0a66"-"\u0a6f",
    "\u0ae6"-"\u0aef",
    "\u0b66"-"\u0b6f",
    "\u0be7"-"\u0bef",
    "\u0c66"-"\u0c6f",
    "\u0ce6"-"\u0cef",
    "\u0d66"-"\u0d6f",
    "\u0e50"-"\u0e59",
    "\u0ed0"-"\u0ed9",
    "\u1040"-"\u1049"
    ]
  >
}

/***************************
 * The Grammar Starts Here *
 ***************************/

void Goal() : {} {
  MainClass()
  <EOF>
}

void MainClass() : {} {
  "int" "main" "(" "void" ")" "{"
    ( LOOKAHEAD(2) VarDeclaration() )* ( Statement() )*
    "return" Expression() ";"
  "}"
}

void VarDeclaration() : {} {
  Type() Identifier() ( VarDeclarationRest() )* ";"
}

void VarDeclarationRest() : {} {
  "," Identifier()
}

void Type() : {} {
  LOOKAHEAD(3)
  ArrayType()
|   LOOKAHEAD(3)
    DoubleArrayType()
|   LOOKAHEAD(3)
    EncryptedArrayType()
|   LOOKAHEAD(3)
    EncryptedDoubleArrayType()
|   BooleanType()
|   IntegerType()
|   EncryptedIntegerType()
|   DoubleType()
|   EncryptedDoubleType()
|   Identifier()
}

void ArrayType() : {} {
  "int" "[" "]"
}

void DoubleArrayType() : {} {
  "double" "[" "]"
}

void EncryptedArrayType() : {} {
  "EncInt" "[" "]"
}

void EncryptedDoubleArrayType() : {} {
  "EncDouble" "[" "]"
}

void BooleanType() : {} {
  "boolean"
}

void IntegerType() : {} {
  "int"
}

void EncryptedIntegerType() : {} {
  "EncInt"
}

void DoubleType() : {} {
  "double"
}

void EncryptedDoubleType() : {} {
  "EncDouble"
}

void Statement() : {} {
  Block()
|   LOOKAHEAD( CompoundArrayAssignmentStatement() )
  CompoundArrayAssignmentStatement() ";"
|   LOOKAHEAD( ArrayAssignmentStatement() )
  ArrayAssignmentStatement() ";"
|   LOOKAHEAD(3)
  BatchAssignmentStatement() ";"
|   LOOKAHEAD(6)
  BatchArrayAssignmentStatement() ";"
|   LOOKAHEAD(2)
  AssignmentStatement() ";"
|   LOOKAHEAD(2)
  IncrementAssignmentStatement() ";"
|   LOOKAHEAD(2)
  DecrementAssignmentStatement() ";"
|   LOOKAHEAD(2)
  CompoundAssignmentStatement() ";"
|   IfStatement()
|   WhileStatement()
|   ForStatement()
|   PrintStatement() ";"
|   PrintBatchedStatement() ";"
|   ReduceNoiseStatement() ";"
|   MatchParamsStatement() ";"
|   RotateLeftStatement() ";"
|   RotateRightStatement() ";"
|   StartTimerStatement() ";"
|   StopTimerStatement() ";"
}

void Block() : {} {
  "{" ( Statement() )* "}"
}

void AssignmentStatement() : {} {
  Identifier() "=" Expression()
}

void IncrementAssignmentStatement() : {} {
  Identifier() "++"
}

void DecrementAssignmentStatement() : {} {
  Identifier() "--"
}

void CompoundAssignmentStatement() : {} {
  Identifier() CompoundOperator() Expression()
}

void CompoundArrayAssignmentStatement() : {} {
  Identifier() "[" Expression() "]" CompoundOperator() Expression()
}

void CompoundOperator() : {} {
  "+="
|   "-="
|   "*="
|   "/="
|   "%="
|   "<<="
|   ">>="
|   ">>>="
|   "&="
|   "|="
|   "^="
}

void ArrayAssignmentStatement() : {} {
  Identifier() "[" Expression() "]" "=" Expression()
}

void BatchAssignmentStatement() : {} {
  Identifier() "=" "{" Expression() ( BatchAssignmentStatementRest() )* "}"
}

void BatchArrayAssignmentStatement() : {} {
  Identifier() "[" Expression() "]" "=" "{" Expression() (
    BatchAssignmentStatementRest() )* "}"
}

void BatchAssignmentStatementRest() : {} {
  "," Expression()
}

void IfStatement() : {} {
  LOOKAHEAD(IfthenElseStatement())
  IfthenElseStatement()
|   IfthenStatement()
}

void IfthenStatement() : {} {
  "if" "(" Expression() ")" Statement()
}
void IfthenElseStatement() : {} {
  "if" "(" Expression() ")" Statement() "else" Statement()
}

void WhileStatement() : {} {
  "while" "(" Expression() ")" Statement()
}

void ForStatement() : {} {
  "for" "("
      AssignmentStatement() ";"
      Expression() ";"
      ( LOOKAHEAD(2) AssignmentStatement() |
        LOOKAHEAD(2) IncrementAssignmentStatement() |
        LOOKAHEAD(2) DecrementAssignmentStatement() |
        LOOKAHEAD(2) CompoundAssignmentStatement()
      )
    ")"
    Statement()
}

void PrintStatement() : {} {
  <PRINT> "(" Expression() ")"
}

void PrintBatchedStatement() : {} {
  <PRINT_BATCHED> "(" Expression() "," Expression() ")"
}

void ReduceNoiseStatement() : {} {
  <REDUCE_NOISE> "(" Expression() ")"
}

void MatchParamsStatement() : {} {
  <MATCH_PARAMS> "(" Expression() "," Expression() ")"
}

void RotateLeftStatement() : {} {
  <ROTATE_LEFT> "(" Expression() "," Expression() ")"
}

void RotateRightStatement() : {} {
  <ROTATE_RIGHT> "(" Expression() "," Expression() ")"
}

void StartTimerStatement() : {} {
  <START_TIMER> "(" ")"
}

void StopTimerStatement() : {} {
  <STOP_TIMER> "(" ")"
}

void Expression() : {} {
  LOOKAHEAD( Clause() "&&" )
  LogicalAndExpression()
|   LOOKAHEAD( Clause() "||" )
  LogicalOrExpression()
|   LOOKAHEAD( PrimaryExpression() BinOperator() )
  BinaryExpression()
|   LOOKAHEAD( "~" PrimaryExpression() )
  BinNotExpression()
|  LOOKAHEAD( PrimaryExpression() "[" )
  ArrayLookup()
|  LOOKAHEAD( PrimaryExpression() "." <ARRAY_SIZE> )
  ArrayLength()
|  LOOKAHEAD( "(" Expression() ")" "?" )
  TernaryExpression()
|   Clause()
}

void LogicalAndExpression() : {} {
  Clause() "&&" Clause()
}

void LogicalOrExpression() : {} {
  Clause() "||" Clause()
}

void BinaryExpression() : {} {
  PrimaryExpression() BinOperator() PrimaryExpression()
}

void BinOperator() : {} {
  "&"
|  "|"
|  "^"
|  "<<"
|  ">>"
|  ">>>"
|  "+"
|  "-"
|  "*"
|  "/"
|  "%"
|  "=="
|  "!="
|  "<"
|  "<="
|  ">"
|  ">="
}

void BinNotExpression() : {} {
  "~" PrimaryExpression()
}

void ArrayLookup() : {} {
  PrimaryExpression() "[" PrimaryExpression() "]"
}

void ArrayLength() : {} {
  PrimaryExpression() "." <ARRAY_SIZE>
}

void TernaryExpression() : {} {
  "(" Expression() ")" "?" Expression() ":" Expression()
}

void Clause() : {} {
  NotExpression()
|   PrimaryExpression()
}

void PrimaryExpression() : {} {
  IntegerLiteral()
|   DoubleLiteral()
|   TrueLiteral()
|   FalseLiteral()
|   Identifier()
|   LOOKAHEAD(3)
  ArrayAllocationExpression()
|   LOOKAHEAD(3)
  EncryptedArrayAllocationExpression()
|   LOOKAHEAD(3)
    ArrayDoubleAllocationExpression()
|   LOOKAHEAD(3) EncryptedArrayDoubleAllocationExpression()
|   BracketExpression()
}

void IntegerLiteral() : {} {
  <INTEGER_LITERAL>
}

void DoubleLiteral() : {} {
  <DOUBLE_LITERAL>
}

void TrueLiteral() : {} {
  "true"
}

void FalseLiteral() : {} {
  "false"
}

void Identifier() : {} {
  <IDENTIFIER>
}

void ArrayAllocationExpression() : {} {
  "new" "int" "[" Expression() "]"
}

void EncryptedArrayAllocationExpression() : {} {
  "new" "EncInt" "[" Expression() "]"
}

void ArrayDoubleAllocationExpression() : {} {
  "new" "double" "[" Expression() "]"
}

void EncryptedArrayDoubleAllocationExpression() : {} {
  "new" "EncDouble" "[" Expression() "]"
}

void NotExpression() : {} {
  "!" Clause()
}

void BracketExpression() : {} {
  "(" Expression() ")"
}
