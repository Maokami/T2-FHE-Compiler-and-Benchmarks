int main(void) {
  int num_inferences, num_attributes, i;
  double[] weights;
  EncDouble w_, accum_, t3mp_;
  EncDouble[] inputs_;

  num_inferences = 10;
  num_attributes = 16;
  weights = { 1.0, 2.0, 3.0, 4.0, 1.0, 2.0, 3.0, 4.0, 1.0, 2.0, 3.0, 4.0, 1.0, 2.0, 3.0, 4.0 };
  accum_ = 0;
  inputs_ = new EncDouble[num_attributes];
  inputs_[0] = { 1, 4, 7, 10, 13, 16, 19, 22, 25, 28 };
  inputs_[1] = { 2, 5, 8, 11, 14, 17, 20, 23, 26, 29 };
  inputs_[2] = { 3, 6, 9, 12, 15, 18, 21, 24, 27, 30 };
  inputs_[3] = { 1, 3, 6, 9, 12, 15, 18, 21, 24, 27 };
  inputs_[4] = { 2, 1, 4, 7, 10, 13, 16, 19, 22, 25 };
  inputs_[5] = { 3, 2, 5, 8, 11, 14, 17, 20, 23, 26 };
  inputs_[6] = { 4, 3, 6, 9, 12, 15, 18, 21, 24, 27 };
  inputs_[7] = { 5, 1, 3, 6, 9, 12, 15, 18, 21, 24 };
  inputs_[8] = { 6, 1, 4, 7, 10, 13, 16, 19, 22, 25 };
  inputs_[9] = { 7, 2, 5, 8, 11, 14, 17, 20, 23, 26 };
  inputs_[10] = { 8, 3, 6, 9, 12, 15, 18, 21, 24, 27 };
  inputs_[11] = { 9, 1, 3, 6, 9, 12, 15, 18, 21, 24 };
  inputs_[12] = { 0, 2, 1, 4, 7, 10, 13, 16, 19, 22 };
  inputs_[13] = { 1, 3, 2, 5, 8, 11, 14, 17, 20, 23 };
  inputs_[14] = { 2, 4, 3, 6, 9, 12, 15, 18, 21, 24, 27 };
  inputs_[15] = { 3, 5, 1, 3, 6, 9, 12, 15, 18, 21 };



  // Server side encrypted computation. //

  // Multiply all attributes by the pre-trained weights and accumulate.
  tstart();
  for (i = 0; i < num_attributes; i++) {
    w_ = weights[i];
    inputs_[i] *= w_;
    reduce_noise(inputs_[i]);
    match_params(accum_, inputs_[i]);
    accum_ += inputs_[i];
  }

  // Sigmoid: (1/2 + x/4 + x^3/48)*48 = (24 + 12x + x^3)
  // Calculate x^3.
  t3mp_ = accum_ * accum_;
  reduce_noise(t3mp_);
  match_params(accum_, t3mp_);
  t3mp_ *= accum_;
  reduce_noise(t3mp_);
  // Calculate 12x.
  accum_ *= 12.0;
  reduce_noise(accum_);
  // Calculate x^3 + 12x.
  match_params(accum_, t3mp_);
  accum_ += t3mp_;
  // Calculate x^3 + 12x + 24.
  accum_ += 24.0;
  tstop();
  // Decrypt
  print_batched(accum_, num_inferences);
  return 0;
}
