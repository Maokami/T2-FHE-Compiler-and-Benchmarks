paramDef := bfv.PN15QP880
params, err := bfv.NewParametersFromLiteral(paramDef)
slots := 2048
if err != nil {
  panic(err)
}
encoder := bfv.NewEncoder(params)
kgen := bfv.NewKeyGenerator(params)
clientSk, clientPk := kgen.GenKeyPair()
encryptorPk := bfv.NewEncryptor(params, clientPk)
encryptorSk := bfv.NewEncryptor(params, clientSk)
decryptor := bfv.NewDecryptor(params, clientSk)
rlk := kgen.GenRelinearizationKey(clientSk, 1)
rots_num := 20
rots := make([]int, rots_num)
for tmp_i := 2; tmp_i < int(rots_num+2); tmp_i += 2 {
  rots[tmp_i - 2] = tmp_i / 2
  rots[tmp_i - 1] = -(tmp_i / 2)
}
_ = rots
rotkey := kgen.GenRotationKeysForRotations(rots, true, clientSk)
evaluator := bfv.NewEvaluator(params, rlwe.EvaluationKey{Rlk: rlk, Rtks: rotkey})
funits.FunitsInit(&encryptorPk, &encoder, &evaluator, &params, int(paramDef.T), slots, word_sz)
ptxt := bfv.NewPlaintext(params, params.MaxLevel())
tmp := make([]int64, slots)
encoder.Encode(tmp, ptxt)
tmp_ := encryptorPk.EncryptNew(ptxt)
_ = tmp_