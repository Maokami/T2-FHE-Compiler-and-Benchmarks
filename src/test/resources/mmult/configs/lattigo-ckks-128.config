params, err := ckks.NewParametersFromLiteral(ckks.PN12QP109)
slots := params.LogSlots()
if err != nil {
  panic(err)
}
encoder := ckks.NewEncoder(params)
kgen := ckks.NewKeyGenerator(params)
clientSk, clientPk := kgen.GenKeyPair()
encryptorPk := ckks.NewEncryptor(params, clientPk)
encryptorSk := ckks.NewEncryptor(params, clientSk)
decryptor := ckks.NewDecryptor(params, clientSk)
rlk := kgen.GenRelinearizationKey(clientSk, 1)
evaluator := ckks.NewEvaluator(params, rlwe.EvaluationKey{Rlk: rlk})
var ptxt *ckks.Plaintext
tmp := make([]complex128, slots)
ptxt = encoder.EncodeNew(tmp, params.MaxLevel(), params.DefaultScale(), slots)
