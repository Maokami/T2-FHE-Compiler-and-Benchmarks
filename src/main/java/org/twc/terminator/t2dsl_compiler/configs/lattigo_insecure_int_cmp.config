customParams := bfv.ParametersLiteral{
  LogN: 7,
  T: 257,
  Q: []uint64{0x7ffffffffe70001, 0x7ffffffffe10001, 0x7ffffffffcc0001, // 59 + 59 + 59 bits
    0x400000000270001, 0x400000000350001, 0x400000000360001, // 58 + 58 + 58 bits
    0x3ffffffffc10001, 0x3ffffffffbe0001, 0x3ffffffffbd0001, // 58 + 58 + 58 bits
    0x4000000004d0001, 0x400000000570001, 0x400000000660001}, // 58 + 58 + 58 bits
  P: []uint64{0x7ffffffffb4001},
  Sigma: rlwe.DefaultSigma,
}
paramDef := customParams
params, err := bfv.NewParametersFromLiteral(paramDef)
slots := 10
if err != nil {
  panic(err)
}
encoder := bfv.NewEncoder(params)
kgen := bfv.NewKeyGenerator(params)
clientSk, clientPk := kgen.GenKeyPair()
encryptorPk := bfv.NewEncryptor(params, clientPk)
encryptorSk := bfv.NewEncryptor(params, clientSk)
decryptor := bfv.NewDecryptor(params, clientSk)
rlk := kgen.GenRelinearizationKey(clientSk, 1)
evaluator := bfv.NewEvaluator(params, rlwe.EvaluationKey{Rlk: rlk})
funits.FunitsInit(&encryptorPk, &encoder, &evaluator, &params, int(paramDef.T), slots, word_sz)
ptxt := bfv.NewPlaintext(params, params.MaxLevel())
tmp := make([]int64, slots)
encoder.Encode(tmp, ptxt)
tmp_ := encryptorPk.EncryptNew(ptxt)
_ = tmp_;

